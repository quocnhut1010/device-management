import { GoogleGenerativeAI } from '@google/generative-ai';
import AIContextService from './aiContextService';

export interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

export interface ChatResponse {
  text: string;
  error?: string;
}

export class AIChatService {
  private static readonly DEFAULT_API_KEY = import.meta.env.VITE_AI_API_KEY || ''; // Load from .env file
  private static readonly MODEL_NAME = 'gemini-2.0-flash-lite';
  
  private static readonly SYSTEM_INSTRUCTION = `B·∫°n l√† tr·ª£ l√Ω AI chuy√™n v·ªÅ qu·∫£n l√Ω thi·∫øt b·ªã c√¥ng ngh·ªá th√¥ng tin v·ªõi kh·∫£ nƒÉng truy c·∫≠p d·ªØ li·ªáu th·ª±c t·ª´ h·ªá th·ªëng. Vai tr√≤ c·ªßa b·∫°n l√†:

1. **Tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n d·ªØ li·ªáu th·ª±c**: 
   - Th·ªëng k√™ s·ªë l∆∞·ª£ng thi·∫øt b·ªã, ph√≤ng ban, nh√† cung c·∫•p
   - Ph√¢n t√≠ch tr·∫°ng th√°i thi·∫øt b·ªã (ƒëang s·ª≠ d·ª•ng, ch·ªù thanh l√Ω, b·∫£o tr√¨, v.v.)
   - Th√¥ng tin v·ªÅ thi·∫øt b·ªã theo ph√≤ng ban c·ª• th·ªÉ
   - L·ªãch s·ª≠ v√† ho·∫°t ƒë·ªông thi·∫øt b·ªã

2. **T∆∞ v·∫•n thi·∫øt b·ªã IT**: 
   - M√°y t√≠nh, laptop, m√°y in, thi·∫øt b·ªã m·∫°ng
   - ƒê·ªÅ xu·∫•t d·ª±a tr√™n d·ªØ li·ªáu hi·ªán c√≥ trong h·ªá th·ªëng
   - So s√°nh v√† ph√¢n t√≠ch thi·∫øt b·ªã

3. **H·ªó tr·ª£ qu·∫£n l√Ω thi·∫øt b·ªã**:
   - Quy tr√¨nh qu·∫£n l√Ω d·ª±a tr√™n d·ªØ li·ªáu th·ª±c t·∫ø
   - Ph√¢n t√≠ch xu h∆∞·ªõng s·ª≠ d·ª•ng thi·∫øt b·ªã
   - ƒê·ªÅ xu·∫•t b·∫£o tr√¨, thay th·∫ø d·ª±a tr√™n th·ªëng k√™

4. **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng h·ªá th·ªëng**:
   - Gi·∫£i th√≠ch t√≠nh nƒÉng d·ª±a tr√™n d·ªØ li·ªáu hi·ªán t·∫°i
   - H∆∞·ªõng d·∫´n thao t√°c v·ªõi ng·ªØ c·∫£nh c·ª• th·ªÉ

**QUAN TR·ªåNG**: 
- Khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ s·ªë li·ªáu, th·ªëng k√™, ho·∫∑c th√¥ng tin c·ª• th·ªÉ v·ªÅ thi·∫øt b·ªã/ph√≤ng ban/nh√† cung c·∫•p, h√£y ∆∞u ti√™n s·ª≠ d·ª•ng d·ªØ li·ªáu th·ª±c t·ª´ h·ªá th·ªëng.
- S·ª≠ d·ª•ng ti·∫øng Vi·ªát, gi·ªçng ƒëi·ªáu th√¢n thi·ªán v√† chuy√™n nghi·ªáp.
- Tr√¨nh b√†y th√¥ng tin r√µ r√†ng v·ªõi emoji v√† ƒë·ªãnh d·∫°ng markdown ƒë·ªÉ d·ªÖ ƒë·ªçc.
- N·∫øu kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu c·ª• th·ªÉ, h√£y gi·∫£i th√≠ch v√† ƒë∆∞a ra g·ª£i √Ω thay th·∫ø.`;

  private genAI: GoogleGenerativeAI | null = null;
  private apiKey: string;

  constructor(apiKey?: string) {
    this.apiKey = apiKey || AIChatService.DEFAULT_API_KEY;
    this.initializeAI();
  }

  private initializeAI() {
    try {
      this.genAI = new GoogleGenerativeAI(this.apiKey);
    } catch (error) {
      console.error('Failed to initialize Google Generative AI:', error);
    }
  }

  public setApiKey(apiKey: string) {
    this.apiKey = apiKey;
    this.initializeAI();
  }

  public static getStoredApiKey(): string | null {
    return localStorage.getItem('device_management_ai_api_key');
  }

  public static saveApiKey(apiKey: string) {
    localStorage.setItem('device_management_ai_api_key', apiKey);
  }

  public static clearStoredApiKey() {
    localStorage.removeItem('device_management_ai_api_key');
  }

  public async sendMessage(
    messages: ChatMessage[],
    customApiKey?: string
  ): Promise<ChatResponse> {
    const keyToUse = customApiKey || this.apiKey;
    
    if (!keyToUse) {
      return {
        text: '',
        error: 'API key kh√¥ng ƒë∆∞·ª£c cung c·∫•p'
      };
    }

    const lastMessage = messages[messages.length - 1];
    
    // Check if this is a system data query first
    if (this.isSystemDataQuery(lastMessage.content)) {
      try {
        console.log('üîç Processing system data query:', lastMessage.content);
        const systemResponse = await AIContextService.processQuery(lastMessage.content);
        return { text: systemResponse };
      } catch (error) {
        console.error('Error processing system query:', error);
        // Fall back to regular AI chat if system query fails
      }
    }

    try {
      // Use custom key if provided, otherwise use instance key
      const genAI = customApiKey ? new GoogleGenerativeAI(customApiKey) : this.genAI;
      
      if (!genAI) {
        throw new Error('Google Generative AI not initialized');
      }

      const model = genAI.getGenerativeModel({
        model: AIChatService.MODEL_NAME,
        systemInstruction: AIChatService.SYSTEM_INSTRUCTION,
      });

      // Convert messages to Gemini format
      const history = messages.slice(0, -1).map((msg) => ({
        role: msg.role === 'assistant' ? 'model' : 'user',
        parts: [{ text: msg.content }],
      }));

      const chat = model.startChat({
        history,
        generationConfig: {
          maxOutputTokens: 2000,
          temperature: 0.7,
        },
      });

      const result = await chat.sendMessage(lastMessage.content);
      const response = await result.response;
      const text = response.text();

      return { text };
    } catch (error) {
      console.error('Error sending message to AI:', error);
      
      let errorMessage = 'ƒê√£ x·∫£y ra l·ªói khi g·ª≠i tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i.';
      
      if (error instanceof Error) {
        if (error.message.includes('API_KEY_INVALID') || error.message.includes('invalid API key')) {
          errorMessage = 'API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i API key c·ªßa b·∫°n.';
        } else if (error.message.includes('quota')) {
          errorMessage = 'ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n s·ª≠ d·ª•ng API. Vui l√≤ng th·ª≠ l·∫°i sau.';
        }
      }

      return {
        text: '',
        error: errorMessage
      };
    }
  }

  private isSystemDataQuery(message: string): boolean {
    const lowerMessage = message.toLowerCase();
    
    const systemKeywords = [
      'bao nhi√™u thi·∫øt b·ªã',
      's·ªë l∆∞·ª£ng thi·∫øt b·ªã', 
      'c√≥ bao nhi√™u',
      'nh√† cung c·∫•p n√†o',
      'ph√≤ng ban n√†o',
      'thi·∫øt b·ªã n√†o',
      'ƒëang ch·ªù thanh l√Ω',
      'ƒëang s·ª≠ d·ª•ng',
      'th·ªëng k√™',
      't·ªïng quan h·ªá th·ªëng',
      't√¨nh tr·∫°ng thi·∫øt b·ªã',
      'ph√≤ng',
      'department',
      'supplier'
    ];

    return systemKeywords.some(keyword => lowerMessage.includes(keyword));
  }
}

// Singleton instance
export const aiChatService = new AIChatService();