import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  Typography,
  Box,
  Alert,
  IconButton,
  InputAdornment,
  Stack,
  Link,
  Divider,
} from '@mui/material';
import {
  Visibility as VisibilityIcon,
  VisibilityOff as VisibilityOffIcon,
  Key as KeyIcon,
  Close as CloseIcon,
} from '@mui/icons-material';
import { AIChatService } from '../../services/aiChatService';

interface APIKeySettingsProps {
  open: boolean;
  onClose: (apiKeySaved: boolean) => void;
}

const APIKeySettings: React.FC<APIKeySettingsProps> = ({ open, onClose }) => {
  const [apiKey, setApiKey] = useState('');
  const [showApiKey, setShowApiKey] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    if (open) {
      // Load existing API key if available
      const storedKey = AIChatService.getStoredApiKey();
      if (storedKey) {
        setApiKey(storedKey);
      }
    }
  }, [open]);

  const handleSave = async () => {
    if (!apiKey.trim()) {
      setError('Vui l√≤ng nh·∫≠p API key');
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      // Test the API key by making a simple request
      const testService = new AIChatService(apiKey.trim());
      const testResponse = await testService.sendMessage([
        {
          role: 'user',
          content: 'Hello, this is a test message',
          timestamp: new Date(),
        }
      ]);

      if (testResponse.error) {
        setError(testResponse.error);
        setIsLoading(false);
        return;
      }

      // Save the API key if test successful
      AIChatService.saveApiKey(apiKey.trim());
      onClose(true);
    } catch (error) {
      console.error('Error testing API key:', error);
      setError('Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Google AI. Vui l√≤ng ki·ªÉm tra API key.');
      setIsLoading(false);
    }
  };

  const handleUseDefault = () => {
    // Clear stored key to use default
    AIChatService.clearStoredApiKey();
    onClose(false);
  };

  const handleClose = () => {
    setApiKey('');
    setError(null);
    onClose(false);
  };

  return (
    <Dialog 
      open={open} 
      onClose={handleClose}
      maxWidth="sm"
      fullWidth
    >
      <DialogTitle>
        <Stack direction="row" alignItems="center" justifyContent="space-between">
          <Stack direction="row" alignItems="center" spacing={1}>
            <KeyIcon color="primary" />
            <Typography variant="h6">C√†i ƒë·∫∑t Google API Key</Typography>
          </Stack>
          <IconButton onClick={handleClose} size="small">
            <CloseIcon />
          </IconButton>
        </Stack>
      </DialogTitle>

      <Divider />

      <DialogContent>
        <Stack spacing={3}>
          <Alert severity="info">
            <Typography variant="body2">
              ƒê·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng chat v·ªõi AI, b·∫°n c·∫ßn c√≥ Google API Key. 
              B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng API key m·∫∑c ƒë·ªãnh ho·∫∑c nh·∫≠p API key c·ªßa ri√™ng b·∫°n.
            </Typography>
          </Alert>

          <Box>
            <Typography variant="subtitle2" gutterBottom>
              Google API Key (T√πy ch·ªçn)
            </Typography>
            <TextField
              fullWidth
              placeholder="Nh·∫≠p Google API Key c·ªßa b·∫°n (AIza...)"
              type={showApiKey ? 'text' : 'password'}
              value={apiKey}
              onChange={(e) => setApiKey(e.target.value)}
              disabled={isLoading}
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton
                      onClick={() => setShowApiKey(!showApiKey)}
                      edge="end"
                      size="small"
                    >
                      {showApiKey ? <VisibilityOffIcon /> : <VisibilityIcon />}
                    </IconButton>
                  </InputAdornment>
                ),
              }}
            />
            <Typography variant="caption" color="text.secondary" sx={{ mt: 1, display: 'block' }}>
              ƒê·ªÉ l·∫•y API key mi·ªÖn ph√≠, truy c·∫≠p{' '}
              <Link
                href="https://aistudio.google.com/app/apikey"
                target="_blank"
                rel="noopener noreferrer"
              >
                Google AI Studio
              </Link>
            </Typography>
          </Box>

          {error && (
            <Alert severity="error">
              {error}
            </Alert>
          )}

          <Alert severity="success">
            <Typography variant="body2" fontWeight={500}>
              üí° M·∫πo:
            </Typography>
            <Typography variant="body2">
              ‚Ä¢ N·∫øu b·∫°n kh√¥ng c√≥ API key ri√™ng, h·ªá th·ªëng s·∫Ω s·ª≠ d·ª•ng key m·∫∑c ƒë·ªãnh
              <br />
              ‚Ä¢ API key ƒë∆∞·ª£c l∆∞u tr·ªØ an to√†n tr√™n thi·∫øt b·ªã c·ªßa b·∫°n
              <br />
              ‚Ä¢ B·∫°n c√≥ th·ªÉ thay ƒë·ªïi API key b·∫•t c·ª© l√∫c n√†o
            </Typography>
          </Alert>
        </Stack>
      </DialogContent>

      <DialogActions sx={{ p: 3 }}>
        <Stack direction="row" spacing={2} sx={{ width: '100%' }}>
          <Button
            variant="outlined"
            onClick={handleUseDefault}
            disabled={isLoading}
            sx={{ flex: 1 }}
          >
            S·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh
          </Button>
          <Button
            variant="contained"
            onClick={handleSave}
            disabled={isLoading}
            sx={{ flex: 1 }}
          >
            {isLoading ? 'ƒêang ki·ªÉm tra...' : 'L∆∞u & S·ª≠ d·ª•ng'}
          </Button>
        </Stack>
      </DialogActions>
    </Dialog>
  );
};

export default APIKeySettings;